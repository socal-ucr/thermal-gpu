#include <stdio.h>
#include <iostream>
#include <cuda_profiler_api.h>
#include <cuda_runtime.h>
#include "power_monitor/power_monitor.h"
__global__ void Kernel(int n, int div)
{
    asm volatile("{\n\t");
    int thread_id = threadIdx.x % 32;
        REGISTER_CODE
    if (thread_id < div) {
        for (int k = 0; k < n; k++) {
           COMPUTE_CODE
        }
    }
    asm volatile("}\n\t");
}

void usage() {
    std::cout << "Usage ./binary <num_blocks> <num_threads_per_block> <iterations>" "threads active per warp" << std::endl;
}

int main( int argc, char** argv)
{
    if (argc != 5) {
        usage();
        exit(1);
    }
    
    int num_blocks = atoi(argv[1]);
    int num_threads_per_block = atoi(argv[2]);
    int iterations = atoi(argv[3]);
    int divergence = atoi(argv[4]);
    
    cudaEvent_t start, stop;
    float time;
    cudaEventCreate(&start);
    cudaEventCreate(&stop);
    
    cudaEventRecord(start, 0);
    cudaProfilerStart();

/* START POWER MONITOR */
    start_power_monitor(1);
    Kernel<<<num_blocks, num_threads_per_block>>>(iterations, divergence);
    cudaProfilerStop();
    cudaEventRecord(stop, 0);
    cudaEventSynchronize(stop);

/* STOP POWER MONITOR */
    end_power_monitor();
    cudaEventElapsedTime(&time, start, stop);
    std::cout << "Time," << time << std::endl;
    cudaEventDestroy(start);
    cudaEventDestroy(stop);
    cudaDeviceSynchronize();

    return 0;
}
